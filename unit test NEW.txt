																				package myMath;

import static org.junit.jupiter.api.Assertions.*;
import junit.framework.*;
import static org.junit.Assert.assertEquals;

import org.junit.jupiter.api.Test;

class myTest
{

	@Test
	// test for the add function, return true if the powers are equals and the coefficient was put together  
	public void testAddMonom()
	{
		  Monom a = new Monom(2,3);
		  Monom b = new Monom(2,3);
		  a.add(b);
	      Monom result = a;
	      assertTrue(result.get_coefficient() == 4 && result.get_power() == 3);
	      assertFalse(result.get_coefficient() != 4 || result.get_power() != 3);
	      
	      Monom c = new Monom(4,3);
		  Monom d = new Monom(2,3);
		  c.add(d);
	      Monom result1 = c;
	      assertTrue(result1.get_coefficient() == 4 && result1.get_power() == 3);
	      assertFalse(result1.get_coefficient() != 4 || result1.get_power() != 3);
	      
	      Monom e = new Monom(4,3);
		  Monom f = new Monom(2,3);
		  e.add(f);
	      Monom result2 = e;
	      assertTrue(result2.get_coefficient() == 4 && result2.get_power() == 3);
	      assertFalse(result2.get_coefficient() != 4 || result2.get_power() != 3);

	      
	 }
	//test if the value x that put inside the monom give the correct answer
	@Test
	
	 public void testF()
	 {
		 double x = 4;
		 double result,result1,result2;
		 Monom a = new Monom(2,3);
		 Monom b = new Monom(1.5,3);
		 Monom c = new Monom(2,4);
		 
		 result=a.f(x);
		 result1=b.f(x);
		 result2=c.f(x);
		 System.out.println(a+" "+x);
		 System.out.println(a.f(x));
		 System.out.println(b+" "+x);
		 System.out.println(b.f(x));
		 System.out.println(c+" "+x);
		 System.out.println(c.f(x));
		 assertTrue(a.f(x)==result &&  b.f(x)==result1 && c.f(x)==result2);
		 assertFalse(a.f(x)!=result ||  b.f(x)!=result1 || c.f(x)!=result2);
		 
	 }
	
	//check if the derivative on the monom give the correct answer
	@Test
	
	public void testDerivative()
	{
		Monom a = new Monom(2,3);
		Monom b = new Monom(12,3);
		Monom c = new Monom(2,6);
		
		a.derivative();
		b.derivative();
		c.derivative();
		assertTrue(a.get_coefficient()==6 && a.get_power()==2 && b.get_coefficient()==36 && b.get_power()==2 && c.get_coefficient()==12 && c.get_power()==1);
		//assertFalse(a.get_coefficient()!=6 || a.get_power()!=2 || b.get_coefficient()!=36 || b.get_power()!=2 || c.get_coefficient()!=12 || c.get_power()!=1);

	}
	
	//this part will check if the oppertion multiply monom with other monom is correct
	@Test
	
	
	public void testMultByOtherMonom()
	{
		Monom a = new Monom(2,3);
		Monom b = new Monom(12,3);
		Monom c = new Monom(2,6);
		Monom d = new Monom(2,3);
		
		Monom ansA=a.multByOtherMonom(b);
		Monom ansB=a.multByOtherMonom(c);
		Monom ansC=a.multByOtherMonom(d);
        
		assertTrue(ansA.get_coefficient()==24 && ansA.get_power()==3 && ansB.get_coefficient()==4 && ansB.get_power()==9 && ansC.get_coefficient()==4 && ansC.get_power()==3);
		//assertTrue(ansA.get_coefficient()!=24 || ansA.get_power()!=3 || ansB.get_coefficient()!=4 || ansB.get_power()!=9 || ansC.get_coefficient()!=4 || ansC.get_power()!=3);		

	}
	
	//this function will check if monom is added correct to polynom ( which is contain several monoms)
	@Test
	
	public void addMonomToPolynom()
	{
		Monom a = new Monom(2,3);
		Monom b = new Monom(12,3);
		Monom c = new Monom(2,6);
		
		Polynom p = new Polynom();
		
		p.add(a);
		p.add(b);
		p.add(c);
		
		Polynom ans = new Polynom("[2x^6+14x^3]");
		
		assertEquals(ans,p);
		
		Monom d = new Monom(2,4);
		Monom e = new Monom(1,3);
		Monom f = new Monom(24,6);
		
		Polynom p1 = new Polynom();
		
		p.add(d);
		p.add(e);
		p.add(f);
		
		Polynom ans1 = new Polynom("[24x^6+2x^4+x^3]");
		
		assertEquals(ans1,p1);
	}
	
	//this part will check if the function of add polynom to polynom is working correct
	@Test
	
	public void addPolynomToPolynom()
	{
		Polynom p1 = new Polynom("[2x^3+4x+5]");
		Polynom p2 = new Polynom("[4x+4]");
		Polynom p3 = new Polynom("[6x^5+4x+3]");
		
	    Polynom ans1 = new Polynom();
		
		Polynom ans2 = new Polynom("[2x^3+4x+5]");
		Polynom ans3 = new Polynom("[2x^3+8x+9]");
		Polynom ans4 = new Polynom("[6x^5+2x^3+12x+12]");
		
		ans1.add(p1);
		assertEquals(ans1,ans2);
		ans1.add(p2);
		assertEquals(ans1,ans3);
		ans1.add(p3);
		assertEquals(ans1,ans4);
	}
	
	//this function check if the subtract method is working , subtract polynom from polynom
	@Test
	
	public void testSubtract()
	{
		Polynom p1 = new Polynom("[2x^3+4x+5]");
		Polynom p2 = new Polynom("[4x+4]");
		Polynom p3 = new Polynom("[6x^5+4x+3]");
		Polynom p4 = new Polynom("[2x^3+4x^2+3]");
		
		Polynom ans2 = new Polynom("[2x^3+1]"); //p1-p2
		Polynom ans3 = new Polynom("[-6x^5+2x^3+2]");//p1-p3
		Polynom ans4 = new Polynom("[-4x^2+4x+2]");//p1-p4
		
		p1.substract(p2);
		assertEquals(p1,ans2);
        
		Polynom d1 = new Polynom("[2x^3+4x+5]");	
		d1.substract(p3);
		assertEquals(d1,ans3);
		
		Polynom h1 = new Polynom("[2x^3+4x+5]");	
		d1.substract(p4);
		assertEquals(h1,ans4);

	}
	
	//this function will check the answer for moltiply polynom with polynom
	@Test
	public void multiplyPolymonWithPolynom()
	{
		Polynom p1 = new Polynom("[2x^3+4x+5]");
		Polynom p2 = new Polynom("[4x+4]");
		Polynom p3 = new Polynom("[6x^5+4x]");
		Polynom p4 = new Polynom("[2x^3+4x^2]");
		
		Polynom ans2 = new Polynom("[4x^6+8x^4+12x^3+4x+1]"); //p1*p2
		Polynom ans3 = new Polynom("[12x^8+24x^6+30x^5+8x^4+16x^2+20x]");//p1*p3
		Polynom ans4 = new Polynom("[4x^6+8x^5+8x^4+26x^3+20x^2]");//p1*p4
		
		p1.multiply(p2);
		assertEquals(p1,ans2);
		
		Polynom h1 = new Polynom("[2x^3+4x+5]");	
		h1.multiply(p3);
		assertEquals(h1,ans3);
		
		Polynom r1 = new Polynom("[2x^3+4x+5]");	
		r1.multiply(p4);
		assertEquals(r1,ans4);
		
	}
	
	//this function will check if polynom is equal to other polynom
	@Test
	
	public void isEqualePolynom()
	{
		Polynom p1 = new Polynom("[2x^3+4x+5]");
		Polynom p2 = new Polynom("[2x^3+4x+5]");
		Polynom p3 = new Polynom("[6x^5+4x]");
		Polynom p4 = new Polynom("[2x^3+4x^2]");
		
		assertEquals(p1,p2);
		assertEquals(p3,p4);
		
	}
	
	//this part will check if polynom is equal to zero
	@Test
	
	public void testZero()
	{
		Polynom p1 = new Polynom("[0x^3+0x+0]");
		Polynom p2 = new Polynom("[0]");
		Polynom p3 = new Polynom("[6x^5+4x]");
		
		assertTrue(p1.isZero());
		assertTrue(p2.isZero());
		assertFalse(p3.isZero());
	}
	
	
	

}


